/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// BalanceOrder : Represents an order linked to a balance definition, including amount, due date, and transaction details.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BalanceOrder {
    /// Order amount (must not be zero).
    #[serde(rename = "amount")]
    pub amount: f64,
    /// Optional unique identifier (UUID) of the associated balance definition.
    #[serde(
        rename = "balanceDefinitionId",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_definition_id: Option<String>,
    /// Unique identifier of the contact placing the order (must be â‰¥ 1).
    #[serde(rename = "contactId")]
    pub contact_id: i32,
    /// RFC3339 timestamp indicating when the order was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// RFC3339 timestamp specifying when the order is due in the future.
    #[serde(rename = "dueAt")]
    pub due_at: String,
    /// Optional RFC3339 timestamp defining order expiration in the future.
    #[serde(rename = "expiresAt", skip_serializing_if = "Option::is_none")]
    pub expires_at: Option<String>,
    /// Unique identifier for the balance order.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Unique identifier of the loyalty program associated with the order.
    #[serde(rename = "loyaltyProgramId")]
    pub loyalty_program_id: String,
    /// Optional metadata associated with the order.
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Optional RFC3339 timestamp indicating when the order was processed.
    #[serde(rename = "processedAt", skip_serializing_if = "Option::is_none")]
    pub processed_at: Option<String>,
    /// Optional reference to the associated transaction ID.
    #[serde(rename = "transactionid", skip_serializing_if = "Option::is_none")]
    pub transactionid: Option<String>,
    /// RFC3339 timestamp indicating the last update to the order.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
}

impl BalanceOrder {
    /// Represents an order linked to a balance definition, including amount, due date, and transaction details.
    pub fn new(
        amount: f64,
        contact_id: i32,
        created_at: String,
        due_at: String,
        loyalty_program_id: String,
        updated_at: String,
    ) -> BalanceOrder {
        BalanceOrder {
            amount,
            balance_definition_id: None,
            contact_id,
            created_at,
            due_at,
            expires_at: None,
            id: None,
            loyalty_program_id,
            meta: None,
            processed_at: None,
            transactionid: None,
            updated_at,
        }
    }
}
