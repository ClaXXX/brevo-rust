/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreatePaymentRequest {
    /// Reference of the payment request, it will appear on the payment page.
    #[serde(rename = "reference")]
    pub reference: String,
    #[serde(rename = "cart")]
    pub cart: Box<models::Cart>,
    /// Brevo ID of the contact requested to pay.
    #[serde(rename = "contactId")]
    pub contact_id: i64,
    /// description of payment request
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "notification", skip_serializing_if = "Option::is_none")]
    pub notification: Option<Box<models::Notification>>,
    #[serde(rename = "configuration", skip_serializing_if = "Option::is_none")]
    pub configuration: Option<Box<models::Configuration>>,
}

impl CreatePaymentRequest {
    pub fn new(reference: String, cart: models::Cart, contact_id: i64) -> CreatePaymentRequest {
        CreatePaymentRequest {
            reference,
            cart: Box::new(cart),
            contact_id,
            description: None,
            notification: None,
            configuration: None,
        }
    }
}
