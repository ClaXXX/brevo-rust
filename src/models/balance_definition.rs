/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BalanceDefinition {
    /// startOfPeriod depicts the balancy expiry on start of day/week/month/year. endOfPeriod depicts the balancy expiry on end of day/week/month/year
    #[serde(
        rename = "balanceAvailabilityDurationModifier",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_availability_duration_modifier: Option<BalanceAvailabilityDurationModifier>,
    /// Unit of time for the balance's availability (e.g., day/week/month/year).
    #[serde(
        rename = "balanceAvailabilityDurationUnit",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_availability_duration_unit: Option<String>,
    /// Number of days/weeks/month/year for balance expiry
    #[serde(
        rename = "balanceAvailabilityDurationValue",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_availability_duration_value: Option<i32>,
    /// Date when the balance expires and can no longer be used, in dd/mm format. The balance will be expired when this date appears next in the calendar and only one of balanceExpirationDate or balance availability fields can be used.
    #[serde(
        rename = "balanceExpirationDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_expiration_date: Option<String>,
    /// Partial enables partial credit of balance if maximum balance limit is reaching. Strict enables rejection of transaction if it will breach the max credit amount limit.
    #[serde(
        rename = "balanceOptionAmountOvertakingStrategy",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_option_amount_overtaking_strategy: Option<String>,
    /// Rounding strategy for credit transactions.
    #[serde(
        rename = "balanceOptionCreditRounding",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_option_credit_rounding: Option<String>,
    /// Rounding strategy for debit transactions.
    #[serde(
        rename = "balanceOptionDebitRounding",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_option_debit_rounding: Option<String>,
    /// Timestamp of balance definition creation.
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Timestamp of balance definition deletion (nullable).
    #[serde(rename = "deletedAt", skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<String>,
    /// Short description of the balance definition.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Unique identifier for the balance definition.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Optional image reference URL.
    #[serde(rename = "imageRef", skip_serializing_if = "Option::is_none")]
    pub image_ref: Option<String>,
    /// Maximum allowable balance.
    #[serde(rename = "maxAmount", skip_serializing_if = "Option::is_none")]
    pub max_amount: Option<f64>,
    /// Max credit allowed per operation.
    #[serde(
        rename = "maxCreditAmountLimit",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_credit_amount_limit: Option<f64>,
    /// Max debit allowed per operation.
    #[serde(
        rename = "maxDebitAmountLimit",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_debit_amount_limit: Option<f64>,
    /// Additional metadata for the balance definition.
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Minimum allowable balance.
    #[serde(rename = "minAmount", skip_serializing_if = "Option::is_none")]
    pub min_amount: Option<f64>,
    /// Name of the balance definition.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Unit of balance (e.g., points, currency).
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    /// Timestamp of the last update.
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl BalanceDefinition {
    pub fn new() -> BalanceDefinition {
        BalanceDefinition {
            balance_availability_duration_modifier: None,
            balance_availability_duration_unit: None,
            balance_availability_duration_value: None,
            balance_expiration_date: None,
            balance_option_amount_overtaking_strategy: None,
            balance_option_credit_rounding: None,
            balance_option_debit_rounding: None,
            created_at: None,
            deleted_at: None,
            description: None,
            id: None,
            image_ref: None,
            max_amount: None,
            max_credit_amount_limit: None,
            max_debit_amount_limit: None,
            meta: None,
            min_amount: None,
            name: None,
            unit: None,
            updated_at: None,
        }
    }
}
/// startOfPeriod depicts the balancy expiry on start of day/week/month/year. endOfPeriod depicts the balancy expiry on end of day/week/month/year
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BalanceAvailabilityDurationModifier {
    #[serde(rename = "startOfPeriod")]
    StartOfPeriod,
    #[serde(rename = "endOfPeriod")]
    EndOfPeriod,
    #[serde(rename = "noModification")]
    NoModification,
}

impl Default for BalanceAvailabilityDurationModifier {
    fn default() -> BalanceAvailabilityDurationModifier {
        Self::StartOfPeriod
    }
}
