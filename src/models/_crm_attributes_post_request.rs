/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CrmAttributesPostRequest {
    /// The label for the attribute (max 50 characters, cannot be empty)
    #[serde(rename = "label")]
    pub label: String,
    /// The type of attribute (must be one of the defined enums)
    #[serde(rename = "attributeType")]
    pub attribute_type: AttributeType,
    /// A description of the attribute
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Options for multi-choice or single-select attributes
    #[serde(rename = "optionsLabels", skip_serializing_if = "Option::is_none")]
    pub options_labels: Option<Vec<String>>,
    /// The type of object the attribute belongs to (prefilled with `companies` or `deal`, mandatory)
    #[serde(rename = "objectType")]
    pub object_type: ObjectType,
}

impl CrmAttributesPostRequest {
    pub fn new(
        label: String,
        attribute_type: AttributeType,
        object_type: ObjectType,
    ) -> CrmAttributesPostRequest {
        CrmAttributesPostRequest {
            label,
            attribute_type,
            description: None,
            options_labels: None,
            object_type,
        }
    }
}
/// The type of attribute (must be one of the defined enums)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AttributeType {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "number")]
    Number,
    #[serde(rename = "single-select")]
    SingleSelect,
    #[serde(rename = "date")]
    Date,
    #[serde(rename = "boolean")]
    Boolean,
    #[serde(rename = "multi-choice")]
    MultiChoice,
}

impl Default for AttributeType {
    fn default() -> AttributeType {
        Self::Text
    }
}
/// The type of object the attribute belongs to (prefilled with `companies` or `deal`, mandatory)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ObjectType {
    #[serde(rename = "companies")]
    Companies,
    #[serde(rename = "deals")]
    Deals,
}

impl Default for ObjectType {
    fn default() -> ObjectType {
        Self::Companies
    }
}
