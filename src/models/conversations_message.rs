/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ConversationsMessage : a Conversations message
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConversationsMessage {
    /// Message ID. It can be used for further manipulations with the message.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// `\"agent\"` for agents’ messages, `\"visitor\"` for visitors’ messages.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// Message text or name of the attached file
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// visitor’s ID
    #[serde(rename = "visitorId", skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// ID of the agent on whose behalf the message was sent (only in messages sent by an agent).
    #[serde(rename = "agentId", skip_serializing_if = "Option::is_none")]
    pub agent_id: Option<String>,
    /// Agent’s name as displayed to the visitor. Only in the messages sent by an agent.
    #[serde(rename = "agentName", skip_serializing_if = "Option::is_none")]
    pub agent_name: Option<String>,
    /// Timestamp in milliseconds.
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// `true` for pushed messages
    #[serde(rename = "isPushed", skip_serializing_if = "Option::is_none")]
    pub is_pushed: Option<bool>,
    /// In two-way integrations, messages sent via REST API can be marked with receivedFrom property and then filtered out when received in a webhook to avoid infinite loop.
    #[serde(rename = "receivedFrom", skip_serializing_if = "Option::is_none")]
    pub received_from: Option<String>,
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<Box<models::ConversationsMessageFile>>,
}

impl ConversationsMessage {
    /// a Conversations message
    pub fn new() -> ConversationsMessage {
        ConversationsMessage {
            id: None,
            r#type: None,
            text: None,
            visitor_id: None,
            agent_id: None,
            agent_name: None,
            created_at: None,
            is_pushed: None,
            received_from: None,
            file: None,
        }
    }
}
/// `\"agent\"` for agents’ messages, `\"visitor\"` for visitors’ messages.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "agent")]
    Agent,
    #[serde(rename = "visitor")]
    Visitor,
}

impl Default for Type {
    fn default() -> Type {
        Self::Agent
    }
}
