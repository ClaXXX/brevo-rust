/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportWebhooksHistoryRequest {
    ExportWebhooksHistory(Box<models::ExportWebhooksHistory>),
}

impl Default for ExportWebhooksHistoryRequest {
    fn default() -> Self {
        Self::ExportWebhooksHistory(Default::default())
    }
}
/// Filter the history based on webhook type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "transactional")]
    Transactional,
    #[serde(rename = "marketing")]
    Marketing,
}

impl Default for Type {
    fn default() -> Type {
        Self::Transactional
    }
}
/// Filter the history for a specific event type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Event {
    #[serde(rename = "invalid_parameter")]
    InvalidParameter,
    #[serde(rename = "missing_parameter")]
    MissingParameter,
    #[serde(rename = "hardBounce")]
    HardBounce,
    #[serde(rename = "softBounce")]
    SoftBounce,
    #[serde(rename = "delivered")]
    Delivered,
    #[serde(rename = "spam")]
    Spam,
    #[serde(rename = "request")]
    Request,
    #[serde(rename = "opened")]
    Opened,
    #[serde(rename = "click")]
    Click,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "deferred")]
    Deferred,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "unsubscribed")]
    Unsubscribed,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "uniqueOpened")]
    UniqueOpened,
    #[serde(rename = "loadedByProxy")]
    LoadedByProxy,
    #[serde(rename = "allEvents")]
    AllEvents,
}

impl Default for Event {
    fn default() -> Event {
        Self::InvalidParameter
    }
}
