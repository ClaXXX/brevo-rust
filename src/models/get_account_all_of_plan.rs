/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetAccountAllOfPlan {
    /// Displays the plan type of the user
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This is the type of the credit, \"Send Limit\" is one of the possible types of credit of a user. \"Send Limit\" implies the total number of emails you can send to the subscribers in your account.
    #[serde(rename = "creditsType")]
    pub credits_type: CreditsType,
    /// Remaining credits of the user
    #[serde(rename = "credits")]
    pub credits: f32,
    /// Date of the period from which the plan will start (only available for \"subscription\" plan type)
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// Date of the period from which the plan will end (only available for \"subscription\" plan type)
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
}

impl GetAccountAllOfPlan {
    pub fn new(r#type: Type, credits_type: CreditsType, credits: f32) -> GetAccountAllOfPlan {
        GetAccountAllOfPlan {
            r#type,
            credits_type,
            credits,
            start_date: None,
            end_date: None,
        }
    }
}
/// Displays the plan type of the user
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "payAsYouGo")]
    PayAsYouGo,
    #[serde(rename = "free")]
    Free,
    #[serde(rename = "subscription")]
    Subscription,
    #[serde(rename = "sms")]
    Sms,
}

impl Default for Type {
    fn default() -> Type {
        Self::PayAsYouGo
    }
}
/// This is the type of the credit, \"Send Limit\" is one of the possible types of credit of a user. \"Send Limit\" implies the total number of emails you can send to the subscribers in your account.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CreditsType {
    #[serde(rename = "sendLimit")]
    SendLimit,
}

impl Default for CreditsType {
    fn default() -> CreditsType {
        Self::SendLimit
    }
}
