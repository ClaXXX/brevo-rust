/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCouponCollection {
    /// The id of the collection.
    #[serde(rename = "id")]
    pub id: String,
    /// The name of the collection.
    #[serde(rename = "name")]
    pub name: String,
    /// The default coupon of the collection.
    #[serde(rename = "defaultCoupon")]
    pub default_coupon: String,
    /// Datetime on which the collection was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// Total number of coupons in the collection.
    #[serde(rename = "totalCoupons")]
    pub total_coupons: i64,
    /// Number of coupons that have not been sent yet.
    #[serde(rename = "remainingCoupons")]
    pub remaining_coupons: i64,
    /// Expiration date for the coupon collection in RFC3339 format.
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    /// If present, an email notification is going to be sent the defined amount of days before to the expiration date.
    #[serde(rename = "remainingDaysAlert", skip_serializing_if = "Option::is_none")]
    pub remaining_days_alert: Option<i32>,
    /// If present, an email notification is going to be sent when the total number of available coupons falls below the defined threshold.
    #[serde(
        rename = "remainingCouponsAlert",
        skip_serializing_if = "Option::is_none"
    )]
    pub remaining_coupons_alert: Option<i32>,
}

impl GetCouponCollection {
    pub fn new(
        id: String,
        name: String,
        default_coupon: String,
        created_at: String,
        total_coupons: i64,
        remaining_coupons: i64,
    ) -> GetCouponCollection {
        GetCouponCollection {
            id,
            name,
            default_coupon,
            created_at,
            total_coupons,
            remaining_coupons,
            expiration_date: None,
            remaining_days_alert: None,
            remaining_coupons_alert: None,
        }
    }
}
