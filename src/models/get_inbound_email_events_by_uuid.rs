/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetInboundEmailEventsByUuid {
    /// Date when email was received on SMTP relay
    #[serde(rename = "receivedAt", skip_serializing_if = "Option::is_none")]
    pub received_at: Option<String>,
    /// Date when email was delivered successfully to client’s webhook
    #[serde(
        rename = "deliveredAt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivered_at: Option<Option<String>>,
    /// Recipient’s email address
    #[serde(rename = "recipient", skip_serializing_if = "Option::is_none")]
    pub recipient: Option<String>,
    /// Sender’s email address
    #[serde(rename = "sender", skip_serializing_if = "Option::is_none")]
    pub sender: Option<String>,
    /// Value of the Message-ID header. This will be present only after the processing is done.
    #[serde(rename = "messageId", skip_serializing_if = "Option::is_none")]
    pub message_id: Option<String>,
    /// Value of the Subject header. This will be present only after the processing is done.
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// List of attachments of the email. This will be present only after the processing is done.
    #[serde(rename = "attachments", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Vec<models::GetInboundEmailEventsByUuidAttachmentsInner>>,
    /// List of events/logs that describe the lifecycle of the email on SIB platform
    #[serde(rename = "logs", skip_serializing_if = "Option::is_none")]
    pub logs: Option<Vec<models::GetInboundEmailEventsByUuidLogsInner>>,
}

impl GetInboundEmailEventsByUuid {
    pub fn new() -> GetInboundEmailEventsByUuid {
        GetInboundEmailEventsByUuid {
            received_at: None,
            delivered_at: None,
            recipient: None,
            sender: None,
            message_id: None,
            subject: None,
            attachments: None,
            logs: None,
        }
    }
}
