/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Cart : Specify the payment currency and amount.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Cart {
    /// Currency code for the payment amount.
    #[serde(rename = "currency")]
    pub currency: Currency,
    /// Payment amount, in cents. e.g. if you want to request â‚¬12.00, then the amount in cents is 1200.
    #[serde(rename = "specificAmount")]
    pub specific_amount: i64,
}

impl Cart {
    /// Specify the payment currency and amount.
    pub fn new(currency: Currency, specific_amount: i64) -> Cart {
        Cart {
            currency,
            specific_amount,
        }
    }
}
/// Currency code for the payment amount.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Currency {
    #[serde(rename = "EUR")]
    Eur,
}

impl Default for Currency {
    fn default() -> Currency {
        Self::Eur
    }
}
