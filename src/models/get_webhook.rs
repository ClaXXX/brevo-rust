/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetWebhook {
    /// URL of the webhook
    #[serde(rename = "url")]
    pub url: String,
    /// ID of the webhook
    #[serde(rename = "id")]
    pub id: i64,
    /// Description of the webhook
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "events")]
    pub events: Vec<String>,
    /// Type of webhook (marketing or transactional)
    #[serde(rename = "type")]
    pub r#type: Type,
    /// channel of webhook
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<Channel>,
    /// Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "modifiedAt")]
    pub modified_at: String,
    /// Batching configuration of the webhook, we send batched webhooks if its true
    #[serde(rename = "batched", skip_serializing_if = "Option::is_none")]
    pub batched: Option<bool>,
    /// Authentication header to be send with the webhook requests
    #[serde(rename = "auth", skip_serializing_if = "Option::is_none")]
    pub auth: Option<serde_json::Value>,
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<serde_json::Value>>,
}

impl GetWebhook {
    pub fn new(
        url: String,
        id: i64,
        description: String,
        events: Vec<String>,
        r#type: Type,
        created_at: String,
        modified_at: String,
    ) -> GetWebhook {
        GetWebhook {
            url,
            id,
            description,
            events,
            r#type,
            channel: None,
            created_at,
            modified_at,
            batched: None,
            auth: None,
            headers: None,
        }
    }
}
/// Type of webhook (marketing or transactional)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "marketing")]
    Marketing,
    #[serde(rename = "transactional")]
    Transactional,
}

impl Default for Type {
    fn default() -> Type {
        Self::Marketing
    }
}
/// channel of webhook
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Channel {
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "email")]
    Email,
}

impl Default for Channel {
    fn default() -> Channel {
        Self::Sms
    }
}
