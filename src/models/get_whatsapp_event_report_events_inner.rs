/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetWhatsappEventReportEventsInner {
    /// WhatsApp Number with country code. Example, 85264318721
    #[serde(rename = "contactNumber")]
    pub contact_number: String,
    /// UTC date-time on which the event has been generated
    #[serde(rename = "date")]
    pub date: String,
    /// Message ID which generated the event
    #[serde(rename = "messageId")]
    pub message_id: String,
    /// Event which occurred
    #[serde(rename = "event")]
    pub event: Event,
    /// Reason for the event (will be there in case of `error` and `soft-bounce` events)
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Text of the reply (will be there only in case of `reply` event with text)
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// Url of the media reply (will be there only in case of `reply` event with media)
    #[serde(rename = "mediaUrl", skip_serializing_if = "Option::is_none")]
    pub media_url: Option<String>,
    /// WhatsApp Number with country code. Example, 85264318721
    #[serde(rename = "senderNumber")]
    pub sender_number: String,
}

impl GetWhatsappEventReportEventsInner {
    pub fn new(
        contact_number: String,
        date: String,
        message_id: String,
        event: Event,
        sender_number: String,
    ) -> GetWhatsappEventReportEventsInner {
        GetWhatsappEventReportEventsInner {
            contact_number,
            date,
            message_id,
            event,
            reason: None,
            body: None,
            media_url: None,
            sender_number,
        }
    }
}
/// Event which occurred
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Event {
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "delivered")]
    Delivered,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "unsubscribe")]
    Unsubscribe,
    #[serde(rename = "reply")]
    Reply,
    #[serde(rename = "soft-bounce")]
    SoftBounce,
}

impl Default for Event {
    fn default() -> Event {
        Self::Sent
    }
}
