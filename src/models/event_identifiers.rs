/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EventIdentifiers : Identifies the contact associated with the event. At least one identifier is required.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventIdentifiers {
    /// Email Id associated with the event
    #[serde(rename = "email_id", skip_serializing_if = "Option::is_none")]
    pub email_id: Option<String>,
    /// SMS associated with the event
    #[serde(rename = "phone_id", skip_serializing_if = "Option::is_none")]
    pub phone_id: Option<String>,
    /// whatsapp associated with the event
    #[serde(rename = "whatsapp_id", skip_serializing_if = "Option::is_none")]
    pub whatsapp_id: Option<String>,
    /// landline_number associated with the event
    #[serde(rename = "landline_number_id", skip_serializing_if = "Option::is_none")]
    pub landline_number_id: Option<String>,
    /// ext_id associated with the event
    #[serde(rename = "ext_id", skip_serializing_if = "Option::is_none")]
    pub ext_id: Option<String>,
}

impl EventIdentifiers {
    /// Identifies the contact associated with the event. At least one identifier is required.
    pub fn new() -> EventIdentifiers {
        EventIdentifiers {
            email_id: None,
            phone_id: None,
            whatsapp_id: None,
            landline_number_id: None,
            ext_id: None,
        }
    }
}
