/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MainPeriodRedeem {
    /// Timestamp when the redemption was cancelled
    #[serde(rename = "cancelledAt", skip_serializing_if = "Option::is_none")]
    pub cancelled_at: Option<String>,
    /// Timestamp when the redemption was completed
    #[serde(rename = "completedAt", skip_serializing_if = "Option::is_none")]
    pub completed_at: Option<String>,
    /// Unique identifier for the contact
    #[serde(rename = "contactId", skip_serializing_if = "Option::is_none")]
    pub contact_id: Option<i64>,
    /// Timestamp when the redemption was created
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Unique identifier for the debit transaction
    #[serde(rename = "debitTransactionId", skip_serializing_if = "Option::is_none")]
    pub debit_transaction_id: Option<uuid::Uuid>,
    /// Timestamp when the redemption expires
    #[serde(rename = "expiresAt", skip_serializing_if = "Option::is_none")]
    pub expires_at: Option<String>,
    /// Unique identifier for the redemption
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// Unique identifier for the loyalty program
    #[serde(rename = "loyaltyProgramId", skip_serializing_if = "Option::is_none")]
    pub loyalty_program_id: Option<uuid::Uuid>,
    /// Additional metadata associated with the redemption
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Reason for rejection if the redemption was rejected
    #[serde(rename = "rejectReason", skip_serializing_if = "Option::is_none")]
    pub reject_reason: Option<String>,
    /// Timestamp when the redemption was rejected
    #[serde(rename = "rejectedAt", skip_serializing_if = "Option::is_none")]
    pub rejected_at: Option<String>,
    /// Unique identifier for the reward attribution
    #[serde(
        rename = "rewardAttributionId",
        skip_serializing_if = "Option::is_none"
    )]
    pub reward_attribution_id: Option<uuid::Uuid>,
    /// Current status of the redemption
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Timestamp when the redemption was last updated
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl MainPeriodRedeem {
    pub fn new() -> MainPeriodRedeem {
        MainPeriodRedeem {
            cancelled_at: None,
            completed_at: None,
            contact_id: None,
            created_at: None,
            debit_transaction_id: None,
            expires_at: None,
            id: None,
            loyalty_program_id: None,
            meta: None,
            reject_reason: None,
            rejected_at: None,
            reward_attribution_id: None,
            status: None,
            updated_at: None,
        }
    }
}
