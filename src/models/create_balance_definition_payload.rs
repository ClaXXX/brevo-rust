/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateBalanceDefinitionPayload : Payload for creating a new balance definition, specifying expiration rules, rounding strategies, and constraints.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateBalanceDefinitionPayload {
    /// Defines when the balance expires within the selected duration.
    #[serde(
        rename = "balanceAvailabilityDurationModifier",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_availability_duration_modifier: Option<BalanceAvailabilityDurationModifier>,
    /// Unit of time for balance validity.
    #[serde(
        rename = "balanceAvailabilityDurationUnit",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_availability_duration_unit: Option<BalanceAvailabilityDurationUnit>,
    /// Number of time units before the balance expires.
    #[serde(
        rename = "balanceAvailabilityDurationValue",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_availability_duration_value: Option<i32>,
    /// Fixed expiration date (`dd/mm` format) as an alternative to duration-based expiry.
    #[serde(
        rename = "balanceExpirationDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_expiration_date: Option<String>,
    /// Defines whether partial credit is allowed when reaching max balance.
    #[serde(
        rename = "balanceOptionAmountOvertakingStrategy",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_option_amount_overtaking_strategy: Option<BalanceOptionAmountOvertakingStrategy>,
    /// Defines rounding strategy for credit transactions.
    #[serde(
        rename = "balanceOptionCreditRounding",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_option_credit_rounding: Option<BalanceOptionCreditRounding>,
    /// Defines rounding strategy for debit transactions.
    #[serde(
        rename = "balanceOptionDebitRounding",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_option_debit_rounding: Option<BalanceOptionDebitRounding>,
    /// Short description of the balance definition.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// URL of an optional image reference.
    #[serde(rename = "imageRef", skip_serializing_if = "Option::is_none")]
    pub image_ref: Option<String>,
    /// Maximum allowable balance amount.
    #[serde(rename = "maxAmount", skip_serializing_if = "Option::is_none")]
    pub max_amount: Option<f64>,
    /// Maximum credit allowed per operation.
    #[serde(
        rename = "maxCreditAmountLimit",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_credit_amount_limit: Option<f64>,
    /// Maximum debit allowed per operation.
    #[serde(
        rename = "maxDebitAmountLimit",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_debit_amount_limit: Option<f64>,
    /// Additional metadata for the balance definition.
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<serde_json::Value>,
    /// Minimum allowable balance amount.
    #[serde(rename = "minAmount", skip_serializing_if = "Option::is_none")]
    pub min_amount: Option<f64>,
    /// Name of the balance definition.
    #[serde(rename = "name")]
    pub name: String,
    /// Unit of balance measurement.
    #[serde(rename = "unit")]
    pub unit: Unit,
}

impl CreateBalanceDefinitionPayload {
    /// Payload for creating a new balance definition, specifying expiration rules, rounding strategies, and constraints.
    pub fn new(name: String, unit: Unit) -> CreateBalanceDefinitionPayload {
        CreateBalanceDefinitionPayload {
            balance_availability_duration_modifier: None,
            balance_availability_duration_unit: None,
            balance_availability_duration_value: None,
            balance_expiration_date: None,
            balance_option_amount_overtaking_strategy: None,
            balance_option_credit_rounding: None,
            balance_option_debit_rounding: None,
            description: None,
            image_ref: None,
            max_amount: None,
            max_credit_amount_limit: None,
            max_debit_amount_limit: None,
            meta: None,
            min_amount: None,
            name,
            unit,
        }
    }
}
/// Defines when the balance expires within the selected duration.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BalanceAvailabilityDurationModifier {
    #[serde(rename = "noModification")]
    NoModification,
    #[serde(rename = "startOfPeriod")]
    StartOfPeriod,
    #[serde(rename = "endOfPeriod")]
    EndOfPeriod,
}

impl Default for BalanceAvailabilityDurationModifier {
    fn default() -> BalanceAvailabilityDurationModifier {
        Self::NoModification
    }
}
/// Unit of time for balance validity.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BalanceAvailabilityDurationUnit {
    #[serde(rename = "day")]
    Day,
    #[serde(rename = "week")]
    Week,
    #[serde(rename = "month")]
    Month,
    #[serde(rename = "year")]
    Year,
}

impl Default for BalanceAvailabilityDurationUnit {
    fn default() -> BalanceAvailabilityDurationUnit {
        Self::Day
    }
}
/// Defines whether partial credit is allowed when reaching max balance.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BalanceOptionAmountOvertakingStrategy {
    #[serde(rename = "strict")]
    Strict,
    #[serde(rename = "partial")]
    Partial,
}

impl Default for BalanceOptionAmountOvertakingStrategy {
    fn default() -> BalanceOptionAmountOvertakingStrategy {
        Self::Strict
    }
}
/// Defines rounding strategy for credit transactions.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BalanceOptionCreditRounding {
    #[serde(rename = "lower")]
    Lower,
    #[serde(rename = "upper")]
    Upper,
    #[serde(rename = "natural")]
    Natural,
}

impl Default for BalanceOptionCreditRounding {
    fn default() -> BalanceOptionCreditRounding {
        Self::Lower
    }
}
/// Defines rounding strategy for debit transactions.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BalanceOptionDebitRounding {
    #[serde(rename = "lower")]
    Lower,
    #[serde(rename = "upper")]
    Upper,
    #[serde(rename = "natural")]
    Natural,
}

impl Default for BalanceOptionDebitRounding {
    fn default() -> BalanceOptionDebitRounding {
        Self::Lower
    }
}
/// Unit of balance measurement.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Unit {
    #[serde(rename = "POINTS")]
    Points,
    #[serde(rename = "EUR")]
    Eur,
    #[serde(rename = "USD")]
    Usd,
    #[serde(rename = "MXN")]
    Mxn,
    #[serde(rename = "GBP")]
    Gbp,
    #[serde(rename = "INR")]
    Inr,
    #[serde(rename = "CAD")]
    Cad,
    #[serde(rename = "SGD")]
    Sgd,
    #[serde(rename = "RON")]
    Ron,
    #[serde(rename = "JPY")]
    Jpy,
    #[serde(rename = "MYR")]
    Myr,
    #[serde(rename = "CLP")]
    Clp,
    #[serde(rename = "PEN")]
    Pen,
    #[serde(rename = "MAD")]
    Mad,
    #[serde(rename = "AUD")]
    Aud,
    #[serde(rename = "CHF")]
    Chf,
    #[serde(rename = "BRL")]
    Brl,
}

impl Default for Unit {
    fn default() -> Unit {
        Self::Points
    }
}
