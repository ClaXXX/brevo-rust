/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BalanceLimit {
    /// balance definition ID
    #[serde(
        rename = "balanceDefinitionId",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_definition_id: Option<String>,
    /// Defines the type of constraint (e.g., transaction-based or amount-based).
    #[serde(rename = "constraintType", skip_serializing_if = "Option::is_none")]
    pub constraint_type: Option<String>,
    /// Timestamp of when the balance limit was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// Time unit for the balance limit (day, week, month, year).
    #[serde(rename = "durationUnit", skip_serializing_if = "Option::is_none")]
    pub duration_unit: Option<String>,
    /// Number of time units the balance limit applies to.
    #[serde(rename = "durationValue", skip_serializing_if = "Option::is_none")]
    pub duration_value: Option<i32>,
    /// Unique identifier for the balance limit.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Indicates if the limit resets periodically based on a sliding schedule.
    #[serde(rename = "slidingSchedule", skip_serializing_if = "Option::is_none")]
    pub sliding_schedule: Option<bool>,
    /// Specifies whether the limit applies to credit or debit transactions.
    #[serde(rename = "transactionType", skip_serializing_if = "Option::is_none")]
    pub transaction_type: Option<String>,
    /// Timestamp of the last update to the balance limit.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// The maximum allowed value for the defined constraint.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<i32>,
}

impl BalanceLimit {
    pub fn new(created_at: String, updated_at: String) -> BalanceLimit {
        BalanceLimit {
            balance_definition_id: None,
            constraint_type: None,
            created_at,
            duration_unit: None,
            duration_value: None,
            id: None,
            sliding_schedule: None,
            transaction_type: None,
            updated_at,
            value: None,
        }
    }
}
