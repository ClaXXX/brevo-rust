/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WhatsappCampTemplate {
    /// name of the template
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// description of the template
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// language of the template
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(rename = "contains_button", skip_serializing_if = "Option::is_none")]
    pub contains_button: Option<bool>,
    #[serde(rename = "display_header", skip_serializing_if = "Option::is_none")]
    pub display_header: Option<bool>,
    /// type of header
    #[serde(rename = "header_type", skip_serializing_if = "Option::is_none")]
    pub header_type: Option<String>,
    /// array of component item objects
    #[serde(rename = "components", skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<models::ComponentItems>>,
    /// array of variables item object
    #[serde(rename = "header_variables", skip_serializing_if = "Option::is_none")]
    pub header_variables: Option<Vec<models::VariablesItems>>,
    /// array of variables item variables
    #[serde(rename = "body_variables", skip_serializing_if = "Option::is_none")]
    pub body_variables: Option<Vec<models::VariablesItems>>,
    #[serde(rename = "button_type", skip_serializing_if = "Option::is_none")]
    pub button_type: Option<String>,
    #[serde(rename = "hide_footer", skip_serializing_if = "Option::is_none")]
    pub hide_footer: Option<bool>,
}

impl WhatsappCampTemplate {
    pub fn new() -> WhatsappCampTemplate {
        WhatsappCampTemplate {
            name: None,
            category: None,
            language: None,
            contains_button: None,
            display_header: None,
            header_type: None,
            components: None,
            header_variables: None,
            body_variables: None,
            button_type: None,
            hide_footer: None,
        }
    }
}
