/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetCorporateUserPermissionFeatureAccess : Granular feature permissions given to the user.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCorporateUserPermissionFeatureAccess {
    /// Permission on api keys
    #[serde(rename = "api_keys", skip_serializing_if = "Option::is_none")]
    pub api_keys: Option<Vec<String>>,
    /// Permission on my plan
    #[serde(rename = "my_plan", skip_serializing_if = "Option::is_none")]
    pub my_plan: Option<Vec<String>>,
    /// Permission on user management
    #[serde(rename = "user_management", skip_serializing_if = "Option::is_none")]
    pub user_management: Option<Vec<String>>,
    /// Permission on apps management
    #[serde(rename = "apps_management", skip_serializing_if = "Option::is_none")]
    pub apps_management: Option<Vec<String>>,
    /// Permission on groups
    #[serde(
        rename = "sub_organization_groups",
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_organization_groups: Option<Vec<String>>,
    /// Permission on create sub-accounts
    #[serde(
        rename = "create_sub_organizations",
        skip_serializing_if = "Option::is_none"
    )]
    pub create_sub_organizations: Option<Vec<String>>,
    /// Permission on manage sub-accounts
    #[serde(
        rename = "manage_sub_organizations",
        skip_serializing_if = "Option::is_none"
    )]
    pub manage_sub_organizations: Option<Vec<String>>,
    /// Permission on analytics
    #[serde(rename = "analytics", skip_serializing_if = "Option::is_none")]
    pub analytics: Option<Vec<String>>,
    /// Permission on security
    #[serde(rename = "security", skip_serializing_if = "Option::is_none")]
    pub security: Option<Vec<String>>,
}

impl GetCorporateUserPermissionFeatureAccess {
    /// Granular feature permissions given to the user.
    pub fn new() -> GetCorporateUserPermissionFeatureAccess {
        GetCorporateUserPermissionFeatureAccess {
            api_keys: None,
            my_plan: None,
            user_management: None,
            apps_management: None,
            sub_organization_groups: None,
            create_sub_organizations: None,
            manage_sub_organizations: None,
            analytics: None,
            security: None,
        }
    }
}
