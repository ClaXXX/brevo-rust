/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TaskReminder : Task reminder date/time for a task
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskReminder {
    /// Value of time unit before reminder is to be sent
    #[serde(rename = "value")]
    pub value: i32,
    /// Unit of time before reminder is to be sent
    #[serde(rename = "unit")]
    pub unit: Unit,
    /// Type of task reminder e.g email, push
    #[serde(rename = "types")]
    pub types: Vec<Types>,
}

impl TaskReminder {
    /// Task reminder date/time for a task
    pub fn new(value: i32, unit: Unit, types: Vec<Types>) -> TaskReminder {
        TaskReminder { value, unit, types }
    }
}
/// Unit of time before reminder is to be sent
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Unit {
    #[serde(rename = "minutes")]
    Minutes,
    #[serde(rename = "hours")]
    Hours,
    #[serde(rename = "weeks")]
    Weeks,
    #[serde(rename = "days")]
    Days,
}

impl Default for Unit {
    fn default() -> Unit {
        Self::Minutes
    }
}
/// Type of task reminder e.g email, push
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Types {
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "push")]
    Push,
}

impl Default for Types {
    fn default() -> Types {
        Self::Email
    }
}
