/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Order {
    /// Unique ID of the order.
    #[serde(rename = "id")]
    pub id: String,
    /// Event occurrence UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when order is actually created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// Event updated UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when the status of the order is actually changed/updated.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// State of the order.
    #[serde(rename = "status")]
    pub status: String,
    /// Total amount of the order, including all shipping expenses, tax and the price of items.
    #[serde(rename = "amount")]
    pub amount: f64,
    /// ID of store where the order is placed
    #[serde(rename = "storeId", skip_serializing_if = "Option::is_none")]
    pub store_id: Option<String>,
    #[serde(rename = "identifiers", skip_serializing_if = "Option::is_none")]
    pub identifiers: Option<Box<models::OrderIdentifiers>>,
    #[serde(rename = "products")]
    pub products: Vec<models::OrderProductsInner>,
    #[serde(rename = "billing", skip_serializing_if = "Option::is_none")]
    pub billing: Option<Box<models::OrderBilling>>,
    /// Coupons applied to the order. Stored case insensitive.
    #[serde(rename = "coupons", skip_serializing_if = "Option::is_none")]
    pub coupons: Option<Vec<String>>,
    /// Meta data of order to store additional detal such as custom message, customer type, source.
    #[serde(rename = "metaInfo", skip_serializing_if = "Option::is_none")]
    pub meta_info: Option<std::collections::HashMap<String, models::OrderMetaInfoValue>>,
}

impl Order {
    pub fn new(
        id: String,
        created_at: String,
        updated_at: String,
        status: String,
        amount: f64,
        products: Vec<models::OrderProductsInner>,
    ) -> Order {
        Order {
            id,
            created_at,
            updated_at,
            status,
            amount,
            store_id: None,
            identifiers: None,
            products,
            billing: None,
            coupons: None,
            meta_info: None,
        }
    }
}
