/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateTransactionPayload : Payload for creating a transaction, specifying balance details and optional expiration.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateTransactionPayload {
    /// Unique identifier for the loyalty subscription (required unless `contactId` is provided).
    #[serde(
        rename = "LoyaltySubscriptionId",
        skip_serializing_if = "Option::is_none"
    )]
    pub loyalty_subscription_id: Option<String>,
    /// Transaction amount (must be provided).
    #[serde(rename = "amount")]
    pub amount: f64,
    /// Whether the transaction should be automatically completed.
    #[serde(rename = "autoComplete", skip_serializing_if = "Option::is_none")]
    pub auto_complete: Option<bool>,
    /// Unique identifier (UUID) of the associated balance definition.
    #[serde(rename = "balanceDefinitionId")]
    pub balance_definition_id: String,
    /// Optional expiry time for the balance in minutes (must be greater than 0 if provided).
    #[serde(
        rename = "balanceExpiryInMinutes",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_expiry_in_minutes: Option<i32>,
    /// Unique identifier of the contact involved in the transaction (required unless `LoyaltySubscriptionId` is provided).
    #[serde(rename = "contactId", skip_serializing_if = "Option::is_none")]
    pub contact_id: Option<i32>,
    /// Optional timestamp specifying when the transaction occurred.
    #[serde(rename = "eventTime", skip_serializing_if = "Option::is_none")]
    pub event_time: Option<String>,
    /// Optional metadata associated with the transaction.
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Optional time-to-live for the transaction (must be greater than 0 if provided).
    #[serde(rename = "ttl", skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i32>,
}

impl CreateTransactionPayload {
    /// Payload for creating a transaction, specifying balance details and optional expiration.
    pub fn new(amount: f64, balance_definition_id: String) -> CreateTransactionPayload {
        CreateTransactionPayload {
            loyalty_subscription_id: None,
            amount,
            auto_complete: None,
            balance_definition_id,
            balance_expiry_in_minutes: None,
            contact_id: None,
            event_time: None,
            meta: None,
            ttl: None,
        }
    }
}
