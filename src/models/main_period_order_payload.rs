/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MainPeriodOrderPayload {
    /// Total amount of the order
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f64>,
    /// Billing information for the order
    #[serde(rename = "billing", skip_serializing_if = "Option::is_none")]
    pub billing: Option<Box<models::MainPeriodBillingPayload>>,
    /// Unique identifier for the contact
    #[serde(rename = "contact_id", skip_serializing_if = "Option::is_none")]
    pub contact_id: Option<i64>,
    /// List of coupon codes applied to the order
    #[serde(rename = "coupons", skip_serializing_if = "Option::is_none")]
    pub coupons: Option<Vec<String>>,
    /// Timestamp when the order was created
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Email address associated with the order
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Unique identifier for the order
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Additional identifiers for the order
    #[serde(rename = "identifiers", skip_serializing_if = "Option::is_none")]
    pub identifiers: Option<Box<models::MainPeriodIdentifiersPayload>>,
    /// List of products in the order
    #[serde(rename = "products", skip_serializing_if = "Option::is_none")]
    pub products: Option<Vec<models::MainPeriodProductPayload>>,
    /// Current status of the order
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Identifier for the store where the order was placed
    #[serde(rename = "storeId", skip_serializing_if = "Option::is_none")]
    pub store_id: Option<String>,
    /// Timestamp when the order was last updated
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl MainPeriodOrderPayload {
    pub fn new() -> MainPeriodOrderPayload {
        MainPeriodOrderPayload {
            amount: None,
            billing: None,
            contact_id: None,
            coupons: None,
            created_at: None,
            email: None,
            id: None,
            identifiers: None,
            products: None,
            status: None,
            store_id: None,
            updated_at: None,
        }
    }
}
