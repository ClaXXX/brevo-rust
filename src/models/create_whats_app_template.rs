/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateWhatsAppTemplate {
    /// Name of the template
    #[serde(rename = "name")]
    pub name: String,
    /// Language of the template. For Example : **en** for English
    #[serde(rename = "language")]
    pub language: String,
    /// Category of the template
    #[serde(rename = "category")]
    pub category: Category,
    /// Absolute url of the media file **(no local file)** for the header. **Use this field in you want to add media in Template header and headerText is empty**. Allowed extensions for media files are: #### jpeg | png | mp4 | pdf
    #[serde(rename = "mediaUrl", skip_serializing_if = "Option::is_none")]
    pub media_url: Option<String>,
    /// Body of the template. **Maximum allowed characters are 1024**
    #[serde(rename = "bodyText")]
    pub body_text: String,
    /// Text content of the header in the template. **Maximum allowed characters are 45** **Use this field to add text content in template header and if mediaUrl is empty**
    #[serde(rename = "headerText", skip_serializing_if = "Option::is_none")]
    pub header_text: Option<String>,
    /// source of the template
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Source>,
}

impl CreateWhatsAppTemplate {
    pub fn new(
        name: String,
        language: String,
        category: Category,
        body_text: String,
    ) -> CreateWhatsAppTemplate {
        CreateWhatsAppTemplate {
            name,
            language,
            category,
            media_url: None,
            body_text,
            header_text: None,
            source: None,
        }
    }
}
/// Category of the template
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Category {
    #[serde(rename = "MARKETING")]
    Marketing,
    #[serde(rename = "UTILITY")]
    Utility,
}

impl Default for Category {
    fn default() -> Category {
        Self::Marketing
    }
}
/// source of the template
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "Automation")]
    Automation,
    #[serde(rename = "Conversations")]
    Conversations,
}

impl Default for Source {
    fn default() -> Source {
        Self::Automation
    }
}
