/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MasterDetailsResponsePlanInfo : Plan details
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MasterDetailsResponsePlanInfo {
    /// Plan currency
    #[serde(rename = "currencyCode", skip_serializing_if = "Option::is_none")]
    pub currency_code: Option<String>,
    /// Timestamp of next billing date
    #[serde(rename = "nextBillingAt", skip_serializing_if = "Option::is_none")]
    pub next_billing_at: Option<i64>,
    /// Plan amount
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    /// Plan period type
    #[serde(rename = "planPeriod", skip_serializing_if = "Option::is_none")]
    pub plan_period: Option<PlanPeriod>,
    /// Number of sub-accounts
    #[serde(rename = "subAccounts", skip_serializing_if = "Option::is_none")]
    pub sub_accounts: Option<i32>,
    /// List of provided features in the plan
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<Vec<models::MasterDetailsResponsePlanInfoFeaturesInner>>,
}

impl MasterDetailsResponsePlanInfo {
    /// Plan details
    pub fn new() -> MasterDetailsResponsePlanInfo {
        MasterDetailsResponsePlanInfo {
            currency_code: None,
            next_billing_at: None,
            price: None,
            plan_period: None,
            sub_accounts: None,
            features: None,
        }
    }
}
/// Plan period type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlanPeriod {
    #[serde(rename = "month")]
    Month,
    #[serde(rename = "year")]
    Year,
}

impl Default for PlanPeriod {
    fn default() -> PlanPeriod {
        Self::Month
    }
}
