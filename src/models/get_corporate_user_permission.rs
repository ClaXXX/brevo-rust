/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetCorporateUserPermission : Check admin user permissions
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCorporateUserPermission {
    /// Email address of the user.
    #[serde(rename = "email")]
    pub email: String,
    /// Status of the invited user.
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "groups")]
    pub groups: Vec<models::GetCorporateUserPermissionGroupsInner>,
    #[serde(rename = "feature_access")]
    pub feature_access: Box<models::GetCorporateUserPermissionFeatureAccess>,
}

impl GetCorporateUserPermission {
    /// Check admin user permissions
    pub fn new(
        email: String,
        status: String,
        groups: Vec<models::GetCorporateUserPermissionGroupsInner>,
        feature_access: models::GetCorporateUserPermissionFeatureAccess,
    ) -> GetCorporateUserPermission {
        GetCorporateUserPermission {
            email,
            status,
            groups,
            feature_access: Box::new(feature_access),
        }
    }
}
