/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetTransacSmsReportReportsInner {
    /// Date for which statistics are retrieved
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// Number of requests for the date
    #[serde(rename = "requests", skip_serializing_if = "Option::is_none")]
    pub requests: Option<i64>,
    /// Number of delivered SMS for the date
    #[serde(rename = "delivered", skip_serializing_if = "Option::is_none")]
    pub delivered: Option<i64>,
    /// Number of hardbounces for the date
    #[serde(rename = "hardBounces", skip_serializing_if = "Option::is_none")]
    pub hard_bounces: Option<i64>,
    /// Number of softbounces for the date
    #[serde(rename = "softBounces", skip_serializing_if = "Option::is_none")]
    pub soft_bounces: Option<i64>,
    /// Number of blocked contact for the date
    #[serde(rename = "blocked", skip_serializing_if = "Option::is_none")]
    pub blocked: Option<i64>,
    /// Number of unsubscription for the date
    #[serde(rename = "unsubscribed", skip_serializing_if = "Option::is_none")]
    pub unsubscribed: Option<i64>,
    /// Number of answered SMS for the date
    #[serde(rename = "replied", skip_serializing_if = "Option::is_none")]
    pub replied: Option<i64>,
    /// Number of accepted SMS for the date
    #[serde(rename = "accepted", skip_serializing_if = "Option::is_none")]
    pub accepted: Option<i64>,
    /// Number of rejected SMS for the date
    #[serde(rename = "rejected", skip_serializing_if = "Option::is_none")]
    pub rejected: Option<i64>,
    /// Number of skipped SMS for the date
    #[serde(rename = "skipped", skip_serializing_if = "Option::is_none")]
    pub skipped: Option<i64>,
}

impl GetTransacSmsReportReportsInner {
    pub fn new() -> GetTransacSmsReportReportsInner {
        GetTransacSmsReportReportsInner {
            date: None,
            requests: None,
            delivered: None,
            hard_bounces: None,
            soft_bounces: None,
            blocked: None,
            unsubscribed: None,
            replied: None,
            accepted: None,
            rejected: None,
            skipped: None,
        }
    }
}
