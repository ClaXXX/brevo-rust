/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EcommerceAttributionMetricsConversionSourceConversionSourceIdGet200Response {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "conversionSource")]
    pub conversion_source: ConversionSource,
    #[serde(rename = "ordersCount")]
    pub orders_count: f64,
    #[serde(rename = "revenue")]
    pub revenue: f32,
    #[serde(rename = "averageBasket")]
    pub average_basket: f32,
    #[serde(rename = "newCustomersCount")]
    pub new_customers_count: f64,
}

impl EcommerceAttributionMetricsConversionSourceConversionSourceIdGet200Response {
    pub fn new(
        id: String,
        conversion_source: ConversionSource,
        orders_count: f64,
        revenue: f32,
        average_basket: f32,
        new_customers_count: f64,
    ) -> EcommerceAttributionMetricsConversionSourceConversionSourceIdGet200Response {
        EcommerceAttributionMetricsConversionSourceConversionSourceIdGet200Response {
            id,
            conversion_source,
            orders_count,
            revenue,
            average_basket,
            new_customers_count,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConversionSource {
    #[serde(rename = "email_campaign")]
    EmailCampaign,
    #[serde(rename = "sms_campaign")]
    SmsCampaign,
    #[serde(rename = "automation_workflow_email")]
    AutomationWorkflowEmail,
    #[serde(rename = "automation_workflow_sms")]
    AutomationWorkflowSms,
}

impl Default for ConversionSource {
    fn default() -> ConversionSource {
        Self::EmailCampaign
    }
}
