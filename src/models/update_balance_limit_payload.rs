/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UpdateBalanceLimitPayload : Payload for updating an existing balance limit, specifying constraints on transactions or amounts.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateBalanceLimitPayload {
    /// Defines whether the limit applies to transaction count or amount.
    #[serde(rename = "constraintType")]
    pub constraint_type: ConstraintType,
    /// Unit of time for which the limit is applicable.
    #[serde(rename = "durationUnit")]
    pub duration_unit: DurationUnit,
    /// Number of time units for the balance limit.
    #[serde(rename = "durationValue")]
    pub duration_value: i32,
    /// Determines if the limit resets on a rolling schedule.
    #[serde(rename = "slidingSchedule", skip_serializing_if = "Option::is_none")]
    pub sliding_schedule: Option<bool>,
    /// Specifies whether the limit applies to credit or debit transactions.
    #[serde(rename = "transactionType")]
    pub transaction_type: TransactionType,
    /// Maximum allowed value for the specified constraint type.
    #[serde(rename = "value")]
    pub value: i32,
}

impl UpdateBalanceLimitPayload {
    /// Payload for updating an existing balance limit, specifying constraints on transactions or amounts.
    pub fn new(
        constraint_type: ConstraintType,
        duration_unit: DurationUnit,
        duration_value: i32,
        transaction_type: TransactionType,
        value: i32,
    ) -> UpdateBalanceLimitPayload {
        UpdateBalanceLimitPayload {
            constraint_type,
            duration_unit,
            duration_value,
            sliding_schedule: None,
            transaction_type,
            value,
        }
    }
}
/// Defines whether the limit applies to transaction count or amount.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConstraintType {
    #[serde(rename = "transaction")]
    Transaction,
    #[serde(rename = "amount")]
    Amount,
}

impl Default for ConstraintType {
    fn default() -> ConstraintType {
        Self::Transaction
    }
}
/// Unit of time for which the limit is applicable.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DurationUnit {
    #[serde(rename = "day")]
    Day,
    #[serde(rename = "week")]
    Week,
    #[serde(rename = "month")]
    Month,
    #[serde(rename = "year")]
    Year,
}

impl Default for DurationUnit {
    fn default() -> DurationUnit {
        Self::Day
    }
}
/// Specifies whether the limit applies to credit or debit transactions.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransactionType {
    #[serde(rename = "credit")]
    Credit,
    #[serde(rename = "debit")]
    Debit,
}

impl Default for TransactionType {
    fn default() -> TransactionType {
        Self::Credit
    }
}
