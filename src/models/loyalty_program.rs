/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoyaltyProgram {
    /// Loyalty Program code count
    #[serde(rename = "codeCount", skip_serializing_if = "Option::is_none")]
    pub code_count: Option<i32>,
    /// Loyalty Program creation date
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Loyalty Program description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// string
    #[serde(rename = "documentId", skip_serializing_if = "Option::is_none")]
    pub document_id: Option<String>,
    /// Loyalty Program ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Loyalty Program meta data
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Loyalty Program name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// string
    #[serde(rename = "pattern", skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    /// Loyalty Program state
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Loyalty Program subscription generator ID
    #[serde(
        rename = "subscriptionGeneratorId",
        skip_serializing_if = "Option::is_none"
    )]
    pub subscription_generator_id: Option<String>,
    /// Loyalty Program subscription pool ID
    #[serde(rename = "subscriptionPoolId", skip_serializing_if = "Option::is_none")]
    pub subscription_pool_id: Option<String>,
    /// Loyalty Program last modification date
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl LoyaltyProgram {
    pub fn new() -> LoyaltyProgram {
        LoyaltyProgram {
            code_count: None,
            created_at: None,
            description: None,
            document_id: None,
            id: None,
            meta: None,
            name: None,
            pattern: None,
            state: None,
            subscription_generator_id: None,
            subscription_pool_id: None,
            updated_at: None,
        }
    }
}
/// Loyalty Program state
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "active")]
    Active,
}

impl Default for State {
    fn default() -> State {
        Self::Inactive
    }
}
