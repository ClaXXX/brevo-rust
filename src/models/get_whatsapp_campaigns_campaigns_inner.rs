/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetWhatsappCampaignsCampaignsInner {
    /// ID of the WhatsApp Campaign
    #[serde(rename = "id")]
    pub id: i64,
    /// Name of the WhatsApp Campaign
    #[serde(rename = "campaignName")]
    pub campaign_name: String,
    /// Id of the WhatsApp template
    #[serde(rename = "templateId")]
    pub template_id: String,
    /// Status of the WhatsApp Campaign
    #[serde(rename = "campaignStatus")]
    pub campaign_status: CampaignStatus,
    /// UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
    #[serde(rename = "scheduledAt")]
    pub scheduled_at: String,
    /// Error Reason associated with the WhatsApp campaign sending
    #[serde(rename = "errorReason", skip_serializing_if = "Option::is_none")]
    pub error_reason: Option<String>,
    /// Count of invalidated contacts
    #[serde(
        rename = "invalidatedContacts",
        skip_serializing_if = "Option::is_none"
    )]
    pub invalidated_contacts: Option<i64>,
    /// Read percentage of the the WhatsApp campaign created
    #[serde(rename = "readPercentage", skip_serializing_if = "Option::is_none")]
    pub read_percentage: Option<f32>,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Box<models::WhatsappCampStats>>,
    /// Creation UTC date-time of the WhatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// UTC date-time of last modification of the WhatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "modifiedAt")]
    pub modified_at: String,
}

impl GetWhatsappCampaignsCampaignsInner {
    pub fn new(
        id: i64,
        campaign_name: String,
        template_id: String,
        campaign_status: CampaignStatus,
        scheduled_at: String,
        created_at: String,
        modified_at: String,
    ) -> GetWhatsappCampaignsCampaignsInner {
        GetWhatsappCampaignsCampaignsInner {
            id,
            campaign_name,
            template_id,
            campaign_status,
            scheduled_at,
            error_reason: None,
            invalidated_contacts: None,
            read_percentage: None,
            stats: None,
            created_at,
            modified_at,
        }
    }
}
/// Status of the WhatsApp Campaign
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CampaignStatus {
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "approved")]
    Approved,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "suspended")]
    Suspended,
    #[serde(rename = "rejected")]
    Rejected,
    #[serde(rename = "sent")]
    Sent,
}

impl Default for CampaignStatus {
    fn default() -> CampaignStatus {
        Self::Draft
    }
}
